# profiles.py
#
# Author: Fanny Avila (Fa-Avila)
# Contributor:  Jacky Zhang (jackyeightzhang),
#               Marcos Avila (DaiconV)
# Date created: 3/27/2020
# Date last modified: 5/28/2020
# Python Version: 3.8.1
# License: MIT License

from discord import Embed, Colour
from discord.ext import commands

from blabber.checks import *


class Profiles(commands.Cog):
    """
    Collection of commands for managing Blabber user settings.

    parameters:
        bot [Bot]: client object representing a Discord bot
    """
    def __init__(self, bot):
        self.voice_profiles = bot.voice_profiles
        self.prefixes = bot.prefixes

    @commands.command(name='voice', aliases=['v'])
    async def voice(self, ctx, *, alias: str=''):
        """
        Modifies/displays voice profile information of the command invoker.

        parameter:
            ctx [Context]: context object generated by a command invocation
            alias   [str] (default=''): name of command invoker's new voice
        """
        member = ctx.author.display_name

        # Check if an alias was provided
        if not alias:
            prefix = self.prefixes[ctx.guild]
            # Retrieve current alias
            alias = self.voice_profiles[(ctx.author, ctx.channel)]

            embed = Embed(
                title=":gear: Voice Settings",
                description="Changes the voice of your TTS narrator",
                colour=Colour.gold())

            embed.add_field(name=f"**{member}'s Current Voice:**",
                            value=f"`{alias}`",
                            inline=False)

            embed.add_field(name="**Update Voice:**",
                            value=f"`{prefix}voice [New Voice]`",
                            inline=False)

        else:
            # Ensure alias provided is valid
            await voice_is_valid(ctx)

            self.voice_profiles[(ctx.author, ctx.channel)] = alias
            embed = Embed(title=(f":white_check_mark: **{member}'s new voice "
                                 f"is** `{alias}`"),
                          colour=Colour.green())

        await ctx.send(embed=embed)

    @voice.error
    async def voice_error(self, ctx, error):
        """
        Sends informational embed to be displayed if set voice command
        is being missing arguments

        parameters:
            ctx [commands.Context]: discord Context object
            error [Error]: general Error object
        """
        prefix = self.prefixes[ctx.guild]
        embed = Embed(title=":x: **Unable to set voice**",
                      description=(f"{error}\n\n**:wrench: Use the** `>list` "
                                   "**command to search for supported "
                                   "voices**"),
                      colour=Colour.red())
        await ctx.send(embed=embed)


def setup(bot):
    """
    Adds Settings Cog to bot.

    parameter:
        bot [discord.Bot]: discord Bot object
    """
    bot.add_cog(Profiles(bot))
